version: '2.4'

services:
  dev_nginx:
    container_name: 'dev_nginx_proxy'
    image: nginx:stable
    ports:
      - '8000:80'
    networks:
      - dataverse
    depends_on:
      - dev_dataverse
      - dev_frontend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./docker-dev-volumes/nginx/logs:/var/log/nginx/

  dev_frontend:
    container_name: 'dev_frontend'
    hostname: frontend
    build:
      context: ../
      dockerfile: ./dev.Dockerfile
      network: host
    expose:
      - '5173'
    stdin_open: true
    networks:
      - dataverse
    depends_on:
      - dev_dataverse
    environment:
      - VITE_DATAVERSE_BACKEND_URL=http://localhost:8000
    volumes:
      - ../:/usr/src/app
      - ../dev-env/vite.config.ts:/usr/src/app/vite.config.ts
      - /usr/src/app/dev-env
      - /usr/src/app/node_modules

  dev_dataverse:
    container_name: 'dev_dataverse'
    hostname: dataverse
    image: ${REGISTRY}/gdcc/dataverse:${DATAVERSE_BRANCH_NAME}
    restart: on-failure
    user: payara
    environment:
      - DATAVERSE_DB_HOST=postgres
      - DATAVERSE_DB_PASSWORD=secret
      - DATAVERSE_DB_USER=${DATAVERSE_DB_USER}
      - DATAVERSE_FEATURE_API_SESSION_AUTH=1
    # We open 8080, rather than just expose, so that the docker-final-setup.sh script works from the run-env.sh script
    ports:
      - '8080:8080'
    networks:
      - dataverse
    depends_on:
      - dev_postgres
      - dev_solr
    volumes:
      - ./docker-dev-volumes/app/data:/dv
      - ./docker-dev-volumes/app/secrets:/secrets
    tmpfs:
      - /dumps:mode=770,size=2052M,uid=1000,gid=1000
      - /tmp:mode=770,size=2052M,uid=1000,gid=1000
    mem_limit: 2147483648 # 2 GiB
    mem_reservation: 1024m
    privileged: false

  dev_postgres:
    container_name: 'dev_postgres'
    hostname: postgres
    image: postgres:${POSTGRES_VERSION}
    restart: on-failure
    environment:
      - POSTGRES_USER=${DATAVERSE_DB_USER}
      - POSTGRES_PASSWORD=secret
    ports:
      - '5432:5432'
    networks:
      - dataverse
    volumes:
      - ./docker-dev-volumes/postgresql/data:/var/lib/postgresql/data

  dev_solr_initializer:
    container_name: 'dev_solr_initializer'
    image: alpine
    restart: 'no'
    command:
      - sh
      - -c
      - 'chown 8983:8983 /conf /var/solr && cp *.xml /conf'
    volumes:
      - ./docker-dev-volumes/solr/data:/var/solr
      - ./docker-dev-volumes/solr/conf:/conf
      - ./dataverse/conf/solr/8.11.1/schema.xml:/schema.xml
      - ./dataverse/conf/solr/8.11.1/solrconfig.xml:/solrconfig.xml

  dev_solr:
    container_name: 'dev_solr'
    hostname: 'solr'
    image: solr:${SOLR_VERSION}
    depends_on:
      - dev_solr_initializer
    restart: on-failure
    expose:
      - '8983'
    networks:
      - dataverse
    command:
      - bash
      - -c
      - 'cd /opt/solr-${SOLR_VERSION}/server/solr/configsets/_default/conf && cp -R -n . /template && solr-precreate collection1 /template'
    volumes:
      - ./docker-dev-volumes/solr/data:/var/solr
      - ./docker-dev-volumes/solr/conf:/template

  dev_smtp:
    container_name: 'dev_smtp'
    hostname: 'smtp'
    image: maildev/maildev:2.0.5
    restart: on-failure
    expose:
      - '25' # smtp server
    ports:
      - '1080:1080' # web ui
    environment:
      - MAILDEV_SMTP_PORT=25
      - MAILDEV_MAIL_DIRECTORY=/mail
    networks:
      - dataverse
    #volumes:
    #  - ./docker-dev-volumes/smtp/data:/mail
    tmpfs:
      - /mail:mode=770,size=128M,uid=1000,gid=1000

networks:
  dataverse:
    driver: bridge
